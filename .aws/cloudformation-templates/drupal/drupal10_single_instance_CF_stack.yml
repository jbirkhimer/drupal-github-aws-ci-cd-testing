AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template: Create a Drupal 10 stack
  using a single EC2 instance and a local MySQL database for storage. AWS CodeDeploy Agent
  is also installed and configured on an the instance which makes it possible for the instance
  to be used in CodeDeploy deployments.
  This template demonstrates using the AWS CloudFormation bootstrap scripts to
  install the packages and files necessary to deploy the Apache web server, Drupal 10
  and MySQL, AWS CodeDeploy Agent at instance launch time.
  **WARNING** This template creates an Amazon EC2 instance.
  You will be billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Target Environment
        Parameters:
          - Environment

      - Label:
          default: Github configurations
        Parameters:
          - GithubRepoName

      - Label:
          default: AWS Parameters
        Parameters:
          - KeyName
          - InstanceType
          - SSHLocation

      - Label:
          default: Database Parameters
        Parameters:
          - DatabaseMasterPassword
          - DatabaseName
          - DatabaseUsername
          - DatabaseUserPassword

      - Label:
          default: Drupal Parameters
        Parameters:
          - AdminUsername
          - AdminPassword

    ParameterLabels:
      KeyName:
        default: Existing Key Pair
      SSHLocation:
        default: SSH Access From
      InstanceType:
        default: EC2 Instance Class

      GithubRepoName:
        default: GitHub Repository

      DatabaseMasterPassword:
        default: DB Master Password
      DatabaseUsername:
        default: DB Username
      DatabaseUserPassword:
        default: DB User Password
      DatabaseName:
        default: DB Name

      AdminUsername:
        default: Admin Username
      AdminPassword:
        default: Admin Password

Parameters:
  # Enviornment type
  Environment:
    Description: Please specify the target Environment. Used for tagging and resource names. Mandatory LOWER CASE.
    ConstraintDescription: Must be one of dev, stage, prod.
    Type: String
    Default: 'dev'
    AllowedValues:
      - dev
      - stage
      - prod

  GithubRepoName:
    Description: Please specify the GitHub repository containing your Drupal application. Must be one of GitHubUser/GitHubRepository
    Type: String
    Default: jbirkhimer/drupal-github-aws-ci-cd-testing
    AllowedPattern: ^((?!.*--)(?!.*-/)[a-zA-Z0-9][a-zA-Z0-9_-]{1,38})/([a-zA-Z\d-_.]{1,100})$
    ConstraintDescription: Must be one of GitHubUser/GitHubRepository

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - c5.18xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.large
      - c5.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - d2.xlarge
      - i3.16xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.large
      - i3.xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.large
      - m5.xlarge
      - t3.2xlarge
      - t3.large
      - t3.medium
      - t3.micro
      - t3.nano
      - t3.small
      - t3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DatabaseName:
    Default: drupaldb
    Description: MySQL database name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9]*)$
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DatabaseUsername:
    Default: drupal
    NoEcho: true
    Description: Username for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9]*)$
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DatabaseUserPassword:
    Default: drupal
    NoEcho: true
    Description: Password for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
  DatabaseMasterPassword:
    Default: drupalAdmin
    NoEcho: true
    Description: Root Password for MySQL database access
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-

  AdminPassword:
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, spaces, and these special characters `~!#$%^&*()_+,-
    Description: The Drupal admin password. Letters, numbers, spaces, and these special characters `~!#$%^&*()_+,-
    Type: String
    NoEcho: true
  AdminUsername:
    Default: admin
    AllowedPattern: ^([a-zA-Z0-9])([a-zA-Z0-9_-])*([a-zA-Z0-9])$
    Description: The Drupal admin username.
    Type: String

Mappings:
  AWSInstanceType2Arch:
    c5.18xlarge:
      Arch: HVM64
    c5.2xlarge:
      Arch: HVM64
    c5.4xlarge:
      Arch: HVM64
    c5.9xlarge:
      Arch: HVM64
    c5.large:
      Arch: HVM64
    c5.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    i3.16xlarge:
      Arch: HVM64
    i3.2xlarge:
      Arch: HVM64
    i3.4xlarge:
      Arch: HVM64
    i3.8xlarge:
      Arch: HVM64
    i3.large:
      Arch: HVM64
    i3.xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.nano:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64

  AWSRegionArch2AMI:
    us-gov-west-1:
      HVM64: ami-03e34865d6f563985
    us-gov-east-1:
      HVM64: ami-09aadc9fe2f314999

Resources:
  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - CodeDeployWebappRole
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - install_cfn_helpers
            - install_docker_compose
            - install_mysql
            - install_webserver
            - install_composer
            - install_drupal
            - start_webserver
        install_cfn_helpers:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
                runas=root
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_docker_compose:
          packages:
            yum:
              docker: []
          files:
            /tmp/install_docker_composer.sh:
              content: !Sub |
                #!/bin/bash -xe

                usermod -a -G docker ec2-user

                mkdir -p /usr/local/lib/docker/cli-plugins

                curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/lib/docker/cli-plugins/docker-compose

                chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
              mode: 000500
              owner: root
              group: root
          commands:
            01_install_docker_composer:
              command: ./install_docker_composer.sh
              cwd: /tmp
              ignoreErrors: false
            02_usermod_add_docker_group:
              command: usermod -a -G docker ec2-user
              ignoreErrors: false
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        install_mysql:
          packages:
            yum:
              mariadb105: [ ]
          files:
            /tmp/start_mysql.sh:
              content: !Sub |
                #!/bin/bash -xe

                docker run --name=mysql --restart always -d \
                  -p 3306:3306 \
                  -e MYSQL_ROOT_PASSWORD=${DatabaseMasterPassword} \
                  -e MYSQL_DATABASE=${DatabaseName} \
                  -e MYSQL_USER=${DatabaseUsername} \
                  -e MYSQL_PASSWORD=${DatabaseUserPassword} \
                  -v mysql:/var/lib/mysql \
                  mysql:8 --default-authentication-plugin=mysql_native_password
              mode: 000500
              owner: root
              group: root
          commands:
            01_start_mysql:
              command: ./start_mysql.sh
              cwd: /tmp
              ignoreErrors: false
        install_webserver:
          packages:
            yum:
              httpd: [ ]
              mod_ssl: [ ]
          files:
            /tmp/create_site_conf.sh:
              content: !Sub |
                #!/bin/bash -xe

                PROJECT_DIR=$(basename "${GithubRepoName}")

                if [ ! -f /etc/httpd/conf.d/${!PROJECT_DIR}.conf ]; then
                  touch /etc/httpd/conf.d/${!PROJECT_DIR}.conf
                  {
                    echo "ServerName 127.0.0.1:80"
                    echo "DocumentRoot /var/www/drupal/${!PROJECT_DIR}/web"
                    echo "<Directory /var/www/drupal/${!PROJECT_DIR}/web>"
                    echo "  Options Indexes FollowSymLinks"
                    echo "  AllowOverride All"
                    echo "  Require all granted"
                    echo "  SetEnv Environment ${Environment}"
                    echo "</Directory>"
                  } > /etc/httpd/conf.d/${!PROJECT_DIR}.conf
                fi
              mode: 000500
              owner: root
              group: root
          commands:
            01_create_site_conf:
              command: ./create_site_conf.sh
              cwd: /tmp
              ignoreErrors: false
            01_usermod_add_apache_group:
              command: usermod -a -G apache ec2-user
              ignoreErrors: false
        install_composer:
          packages:
            yum:
              php8.1: [ ]
          files:
            /tmp/install_composer.sh:
              content: !Sub |
                #!/bin/bash -xe

                # install composer
                curl -sS https://getcomposer.org/installer -o composer-setup.php
                HOME=~/ php composer-setup.php --install-dir=/usr/local/bin --filename=composer
              mode: 000500
              owner: root
              group: root
          commands:
            01_install_composer:
              command: ./install_composer.sh
              cwd: /tmp
              ignoreErrors: false
        install_drupal:
          packages:
            yum:
              git: []
              php8.1-cli: [ ]
              php8.1-pdo: [ ]
              php8.1-fpm: [ ]
              php8.1-xml: [ ]
              php8.1-mysqlnd: [ ]
              php8.1-gd: [ ]
              php8.1-opcache: [ ]
              php8.1-mbstring: [ ]
          files:
            /tmp/install_drupal.sh:
              content: !Sub |
                #!/bin/bash -xe

                PROJECT_DIR=$(basename "${GithubRepoName}")

                if [ ! -d /var/www/drupal/${!PROJECT_DIR} ]; then
                  mkdir -p /var/www/drupal/ && cd /var/www/drupal

                  git clone https://github.com/${GithubRepoName}.git
                  cd /var/www/drupal/${!PROJECT_DIR}

                  # (optional) sometimes get timeout error 'Install of drupal/core failed The following exception is caused by a process timeout' during composer install
                  HOME=~/ /usr/local/bin/composer config process-timeout 2000

                  HOME=~/ /usr/local/bin/composer install

                  # create settings.php and set db and hash_salt (optional use drush)
                  if [ ! -f /var/www/drupal/${!PROJECT_DIR}/web/sites/default/settings.php ]; then
                    cp ./web/sites/default/default.settings.php ./web/sites/default/settings.php

                    {
                      echo -e "\$databases['default']['default'] = array ("
                      echo -e " 'database' => '${DatabaseName}',"
                      echo -e " 'username' => '${DatabaseUsername}',"
                      echo -e " 'password' => '${DatabaseUserPassword}',"
                      echo -e " 'prefix' => '',"
                      echo -e " 'host' => '127.0.0.1',"
                      echo -e " 'port' => '3306',"
                      echo -e " 'isolation_level' => 'READ COMMITTED',"
                      echo -e " 'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',"
                      echo -e " 'driver' => 'mysql',"
                      echo -e " 'autoload' => 'core/modules/mysql/src/Driver/Database/mysql/',"
                      echo -e " );\n"
                      echo -e "\$settings['config_sync_directory'] = '../config/sync/default';\n"
                      echo -e "\$split_filename_prefix = 'config_split.config_split';\n"
                      echo -e "/** Set environment splits. */"
                      echo -e "\$split_envs = [ 'local', 'dev', 'stage', 'prod' ];\n"
                      echo -e "// Disable all split by default."
                      echo -e "foreach (\$split_envs as \$split_env) {"
                      echo -e " \$config[\"\$split_filename_prefix.\$split_env\"]['status'] = FALSE;"
                      echo -e "}\n"
                      echo -e "# manually set environment"
                      echo -e "#putenv('ENVIRONMENT=local');\n"
                      echo -e "\$split = getenv('ENVIRONMENT');\n"
                      echo -e "// Enable the environment split only if it exists."
                      echo -e "if (\$split != FALSE) {"
                      echo -e " \$config[\"\$split_filename_prefix.\$split\"]['status'] = TRUE;"
                      echo -e "} else {"
                      echo -e " \$split = 'local';"
                      echo -e " \$config[\"\$split_filename_prefix.\$split\"]['status'] = TRUE;"
                      echo -e "}"
                    } >> ./web/sites/default/settings.php

                    HASH_SALT=$(HOME=~/ ./vendor/bin/drush eval "print_r(Drupal\Component\Utility\Crypt::randomBytesBase64(55))")
                    echo "Hash Salt: ${!HASH_SALT}"
                    sed -i "s/^\$settings\['hash_salt'\].*$/\$settings\['hash_salt'\] = '${!HASH_SALT}';/" ./web/sites/default/settings.php
                  fi

                  # run drush commands as needed
                  cd /var/www/drupal/${!PROJECT_DIR}/web

                  # fix for bug with hook_install during site:install only allows using existing-config for minimal install profile
                  # see https://www.drupal.org/project/drupal/issues/2982052 and https://www.drupal.org/node/2897299
                  sed -i 's|standard|minimal|g' ../config/sync/default/core.extension.yml

                  HOME=~/ ../vendor/bin/drush site:install -y \
                    --account-name=${AdminUsername} \
                    --account-pass=${AdminPassword} \
                    --existing-config

                  HOME=~/ ../vendor/bin/drush deploy
                  HOME=~/ ../vendor/bin/drush cache:rebuild

                fi

                # Change the group ownership of /var/www and its contents to the apache group
                chown -R ec2-user:apache /var/www

                chmod 2775 /var/www && find /var/www -type d -exec chmod 2775 {} \;
                # Add group write permissions
                find /var/www -type f -exec chmod 0664 {} \;

                chmod u+x -R /var/www/drupal/${!PROJECT_DIR}/vendor/bin/*
              mode: 000500
              owner: root
              group: root
          commands:
            01_install_drupal:
              command: ./install_drupal.sh 2>&1 | tee /var/log/drupal_install.log
              cwd: /tmp
              ignoreErrors: false
        start_webserver:
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              codedeploy-agent:
                enabled: true
                ensureRunning: true
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
          commands:
            start_webserver:
              command: systemctl restart httpd
              ignoreErrors: false
            start_fpm:
              command: systemctl restart php-fpm
              ignoreErrors: false
    Properties:
      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', drupal ] ]
        - Key: GithubRepoName
          Value: !Ref GithubRepoName
        - Key: Environment
          Value: !Ref Environment
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe

            # SSM Agent seems to cause "RPM: error: can't create transaction lock on /var/lib/rpm/.rpm.lock (Resource temporarily unavailable)"
            # Stop the amazon-ssm-agent service and start it back up at the end.
            # see: https://repost.aws/questions/QUgNz4VGCFSC2TYekM-6GiDQ/dnf-yum-both-fails-while-being-executed-on-instance-bootstrap-on-amazon-linux-2023
            # and https://github.com/amazonlinux/amazon-linux-2023/issues/397
            systemctl stop amazon-ssm-agent

            dnf update -y aws-cfn-bootstrap

            # Install codedeploy agent
            cd /tmp
            aws s3 cp 's3://aws-codedeploy-us-gov-west-1/latest/codedeploy-agent.noarch.rpm' .
            dnf install -y ruby codedeploy-agent.noarch.rpm

            echo -e '#!/bin/sh\nexport ENVIRONMENT=${Environment}' > /etc/profile.d/drupal_env.sh
            chmod +x /etc/profile.d/drupal_env.sh
            source ~/.bash_profile

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', sg-incoming-sonar ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
Outputs:
  WebsiteURL:
    Description: URL for newly created Sonarqube stack
    Value: !Join [ '', [ 'http://', !GetAtt [ WebServerInstance, PublicDnsName ] ] ]
