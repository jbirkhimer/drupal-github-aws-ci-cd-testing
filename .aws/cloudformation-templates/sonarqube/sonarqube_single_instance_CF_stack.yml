AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template: Create a SonarQube stack
  using a single EC2 instance and a local Postgres database for storage. This
  template demonstrates using the AWS CloudFormation bootstrap scripts to
  install the packages and files necessary to deploy the Apache web server, SonarQube
  and Postgres at instance launch time. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a
  stack from this template.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: ^([a-zA-Z0-9 @.`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DBName:
    Default: sonar
    Description: Postgres database name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9]*)$
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Default: sonar
    NoEcho: true
    Description: Username for Postgres database access
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9]*)$
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Default: sonar
    NoEcho: true
    Description: Password for Postgres database access
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^([a-zA-Z0-9`~!#$%^&*()_+,\\-])*$
    ConstraintDescription: Must be letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,-
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - c5.18xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.large
      - c5.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - d2.xlarge
      - i3.16xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.large
      - i3.xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.large
      - m5.xlarge
      - t3.2xlarge
      - t3.large
      - t3.medium
      - t3.micro
      - t3.nano
      - t3.small
      - t3.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSInstanceType2Arch:
    c5.18xlarge:
      Arch: HVM64
    c5.2xlarge:
      Arch: HVM64
    c5.4xlarge:
      Arch: HVM64
    c5.9xlarge:
      Arch: HVM64
    c5.large:
      Arch: HVM64
    c5.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    i3.16xlarge:
      Arch: HVM64
    i3.2xlarge:
      Arch: HVM64
    i3.4xlarge:
      Arch: HVM64
    i3.8xlarge:
      Arch: HVM64
    i3.large:
      Arch: HVM64
    i3.xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.24xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.medium:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.nano:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-gov-west-1:
      HVM64: ami-03e34865d6f563985
    us-gov-east-1:
      HVM64: ami-09aadc9fe2f314999
Resources:
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          InstallAndRun:
            - Install
            - Configure
            - Start
        Install:
          packages:
            yum:
              docker: []
          files:
            /home/ec2-user/install_composer.sh:
              content:
                !Sub |
                  #!/bin/bash -xe

                  usermod -a -G docker ec2-user

                  mkdir -p /usr/local/lib/docker/cli-plugins

                  curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/lib/docker/cli-plugins/docker-compose

                  chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
              mode: 000500
              owner: root
              group: root
            /home/ec2-user/docker-compose.yml:
              source: https://github.com/jbirkhimer/drupal-github-aws-ci-cd-testing/raw/main/.aws/cloudformation-templates/sonarqube/docker-compose.yml
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content:
                !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}
                  runas=root
              mode: '000400'
              owner: root
              group: root
          commands:
            01_install_composer:
              command: ./install_composer.sh
              cwd: /home/ec2-user
              ignoreErrors: false
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        Configure:
          files:
            /home/ec2-user/httpd.conf:
              source: https://github.com/jbirkhimer/drupal-github-aws-ci-cd-testing/raw/main/.aws/cloudformation-templates/sonarqube/httpd.conf
              mode: 000500
              owner: root
              group: root
            /home/ec2-user/sonarqube.conf:
              source: https://github.com/jbirkhimer/drupal-github-aws-ci-cd-testing/raw/main/.aws/cloudformation-templates/sonarqube/sonarqube.conf
              mode: 000500
              owner: root
              group: root
        Start:
          commands:
            01_docker_compose_up:
              command: docker compose up -d
              cwd: /home/ec2-user
              ignoreErrors: false
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sonarqube ] ]
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash -xe

            yum update -y aws-cfn-bootstrap

            cd /tmp
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            systemctl enable amazon-ssm-agent
            systemctl start amazon-ssm-agent

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets InstallAndRun --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80
      Tags:
        - Key: Name
          Value: !Join [ ":", [ !Ref "AWS::StackName", sg-incoming-sonar ] ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
Outputs:
  WebsiteURL:
    Description: URL for newly created Sonarqube stack
    Value: !Join [ '', [ 'http://', !GetAtt [ WebServerInstance, PublicDnsName ] ] ]
